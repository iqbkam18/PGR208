package no.kristiania.project.management.database.controllers.http;

import no.kristiania.project.management.database.dao.CookiesDao;
import no.kristiania.project.management.database.tabels.Cookie;
import no.kristiania.project.management.server.HttpController;
import no.kristiania.project.management.server.HttpServer;
import org.postgresql.ds.PGSimpleDataSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.sql.SQLException;
import java.util.Map;
import java.util.Properties;

/**
 * As we are going to use HttpController for database on multiple places and code is very much alike we are going to put it in one abstract class
 * We expect that classes implementing this AbstractDatabaseHttpController are implementing getBody and insertData methods
 * as those are the only ones that are differ from database to database
 */
public abstract class AbstractDatabaseHttpController implements HttpController {
    private static Logger logger = LoggerFactory.getLogger(HttpServer.class);

    @Override
    public void handle(String requestAction, String requestPath, Map<String, String> query, String requestBody, OutputStream outputStream) throws IOException {
        try {
            if (requestAction.equals("POST")) {
                query = HttpServer.parseQueryString(requestBody);
                insertData(query);
                outputStream.write(("HTTP/1.1 302 Redirect\r\n" +
                        "Location: http://localhost:8080" + requestPath + "\r\n" +
                        "Connection: close\r\n" +
                        "\r\n").getBytes());
                return;
            }

            int statusCode = 200;
            String contentType = "text/html";
            configureCookie(query.get("cookie"));
            String body = getBody();
            int contentLength = body.getBytes(StandardCharsets.UTF_8).length;
            outputStream.write(("HTTP/1.1 " + statusCode + " \r\n" +
                    "Content-type:" + contentType + "; charset=utf-8\r\n" +
                    "Content-length: " + contentLength + "\r\n" +
                    "Connection: close\r\n" +
                    "\r\n" +
                    body).getBytes());

        } catch (IOException | SQLException e) {
            logger.error("While handling request {}", requestPath, e);
            int status = 500;
            String message = e.toString();
            outputStream.write(("HTTP/1.1 " + status + " \r\n" +
                    "Content-type:" + "text/html" + "; charset=utf-8\r\n" +
                    "Content-length: " + message.length() + "\r\n" +
                    "Connection: close\r\n" +
                    "\r\n" +
                    message).getBytes());
        }
    }

    /**
     * This function is configuring cookies. If there is cookie in database then we return or else we put cookie in it
     * @param cookieValue send cookie value that is generated by file controller
     * @throws IOException in case of fail in reading file
     * @throws SQLException in case of mis formatting in sql
     */
    public static void configureCookie(String cookieValue) throws IOException, SQLException {
        Properties properties = new Properties();

        try (FileReader fileReader = new FileReader("task-manager.properties")) {
            properties.load(fileReader);
        }
        PGSimpleDataSource dataSource = new PGSimpleDataSource();
        dataSource.setUrl(properties.getProperty("dataSource.url"));
        dataSource.setUser(properties.getProperty("dataSource.username"));
        dataSource.setPassword(properties.getProperty("dataSource.password"));

        CookiesDao cookiesDao = new CookiesDao(dataSource);
        Cookie cookieFromDatabase = cookiesDao.retrieve(cookieValue);
        if(cookieFromDatabase != null)
            return;
        Cookie toInsert = new Cookie();
        toInsert.setCookie(cookieValue);
        toInsert.setWorkerID(1);
        cookiesDao.insert(toInsert);
    }

    /**
     * List information about given object controller (often as HTML option)
     * @return return data formatted as string
     * @throws SQLException in case of invalid sql expression
     */
    protected abstract String getBody() throws SQLException;

    /**
     * This function is going to call insert function of Dao that is created for given controller
     * @param query data that is going to be send to database
     * @throws SQLException in case of invalid sql expression
     */
    protected abstract void insertData(Map<String, String> query) throws SQLException;

}
